<div class="row mb-3">
  <div class="col">
    <h2>Mapping BK-CPL</h2>
    <p class="text-muted">
      Pemetaan antara Bahan Kajian dan Capaian Pembelajaran Lulusan
    </p>
  </div>
  <div class="col-auto">
    <button id="edit-toggle-btn" class="btn btn-warning">
      <i class="fas fa-edit"></i> Edit
    </button>
  </div>
</div>

<div class="table-responsive">
  <table class="table table-bordered table-striped">
    <thead class="table-light">
      <tr>
        <th rowspan="2" class="align-middle">Kode BK</th>
        <th rowspan="2" class="align-middle">Bahan Kajian</th>
        <th colspan="<%= cpls.length %>" class="text-center">
          Capaian Pembelajaran Lulusan (CPL)
        </th>
      </tr>
      <tr>
        <% if (cpls && cpls.length > 0) { %> <% cpls.forEach(cpl => { %>
        <th class="text-center align-top" style="vertical-align: top">
          <%= cpl.kode_cpl %><br />
          <small><i><%= cpl.deskripsi %></i></small>
        </th>
        <% }) %> <% } %>
      </tr>
    </thead>
    <tbody class="table-group-divider">
      <% if (bks && bks.length > 0) { %> <% bks.forEach((bk, index) => { %>
      <tr>
        <td><%= bk.kode_bk %></td>
        <td><%= bk.bahan_kajian %></td>
        <% cpls.forEach(cpl => { %>
        <td class="text-center">
          <% const isChecked = bkMappings[bk.kode_bk] &&
          bkMappings[bk.kode_bk].includes(cpl.kode_cpl); %>
          <div class="view-mode">
            <% if (isChecked) { %>
            <span class="text-success">✔</span>
            <% } %>
          </div>
          <div class="edit-mode" style="display: none">
            <input type="checkbox" class="mapping-checkbox form-check-input"
            data-bk="<%= bk.kode_bk %>" data-cpl="<%= cpl.kode_cpl %>" <%=
            isChecked ? 'checked' : '' %> />
          </div>
        </td>
        <% }) %>
      </tr>
      <% }) %> <% } else { %>
      <tr>
        <td colspan="<%= 2 + cpls.length %>" class="text-center">
          No BKs available
        </td>
      </tr>
      <% } %>
    </tbody>
  </table>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Get all elements we need to interact with
    const editToggleBtn = document.getElementById("edit-toggle-btn");
    const viewModes = document.querySelectorAll(".view-mode");
    const editModes = document.querySelectorAll(".edit-mode");
    const checkboxes = document.querySelectorAll(".mapping-checkbox");

    // We start in view mode
    let editMode = false;

    // Function to toggle between view and edit modes
    function toggleEditMode() {
      editMode = !editMode;

      viewModes.forEach((elem) => {
        elem.style.display = editMode ? "none" : "block";
      });

      editModes.forEach((elem) => {
        elem.style.display = editMode ? "block" : "none";
      });

      // Update button text
      if (editMode) {
        editToggleBtn.innerHTML = '<i class="fas fa-check"></i> Done';
        editToggleBtn.classList.replace("btn-warning", "btn-success");
      } else {
        editToggleBtn.innerHTML = '<i class="fas fa-edit"></i> Edit';
        editToggleBtn.classList.replace("btn-success", "btn-warning");
      }
    }

    // Add event listener for the edit toggle button
    editToggleBtn.addEventListener("click", toggleEditMode);

    // Handle checkbox changes - mapping/unmapping
    checkboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", function () {
        const kodeBk = this.dataset.bk;
        const kodeCpl = this.dataset.cpl;
        const isChecked = this.checked;

        // Find the corresponding view mode element
        const tdCell = this.closest("td");
        const viewModeElement = tdCell.querySelector(".view-mode");

        // Disable checkbox during update to prevent multiple clicks
        this.disabled = true;

        // Send the update to the server
        fetch("/bk/bk-cpl-mapping/update", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            kode_bk: kodeBk,
            kode_cpl: kodeCpl,
            isChecked: isChecked.toString(),
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              // Re-enable checkbox after successful update
              this.disabled = false;

              // Update the view mode element to reflect the new checkbox state
              if (isChecked) {
                viewModeElement.innerHTML =
                  '<span class="text-success">✔</span>';
              } else {
                viewModeElement.innerHTML = "";
              }
            } else {
              // If there was an error, revert the checkbox
              this.checked = !isChecked;
              this.disabled = false;
              alert(
                "Error updating mapping: " + (data.message || "Unknown error")
              );
            }
          })
          .catch((error) => {
            // Handle network or other errors
            console.error("Error:", error);
            this.checked = !isChecked;
            this.disabled = false;
            alert("Error updating mapping: Network error");
          });
      });
    });
  });
</script>

<%- contentFor('title') %> BK-CPL Mapping
